pipeline {
    agent any
    
    tools{
        nodejs 'nodejs24'
    }
    
    environment{
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'docker-build-deploy', url: 'https://github.com/samarthkhanna2741/3-Tier-DevSecOps-Mega-Project.git'
            }
        }
        
        stage('Frontend Compilation') {
            steps {
                dir('client') {
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        
        stage('Backend Compilation') {
            steps {
                dir('api') {
                    sh 'find . -name "*.js" -exec node --check {} +' 
                }
            }
        }
        
        stage('Gitleaks Scan') {
            steps {
                sh 'gitleaks detect --source ./client --exit-code 1'
                sh 'gitleaks detect --source ./api --exit-code 1'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=NodeJS-Project \
                    -Dsonar.projectKey=Node-JS-Project '''
                }
            }
        }
        
        stage('Quality Gate Check') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        
        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
        
        stage('Build-Tag & Push Backend Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred') {
                            dir('api') {
                            sh 'docker build -t samarthkhanna2741/backend:latest .'
                            sh 'trivy image --format table -o backend-image-report.html samarthkhanna2741/backend:latest'
                            sh 'docker push samarthkhanna2741/backend:latest'
                        }
                    }
                }
            }
        }
        
        stage('Build-Tag & Push Frontend Docker Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred') {
                            dir('client') {
                            sh 'docker build -t samarthkhanna2741/frontend:latest .'
                            sh 'trivy image --format table -o frontend-image-report.html samarthkhanna2741/frontend:latest'
                            sh 'docker push samarthkhanna2741/frontend:latest'
                        }
                    }
                }
            }
        }
        
        stage('Docker Deploy via Compose') {
            steps {
                script{
                    sh 'docker-compose up -d'
                }
            }
        }
        

    }
}
